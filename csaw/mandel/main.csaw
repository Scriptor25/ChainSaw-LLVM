inc "complex.csaw";

num MAX_ITER = 100;
num SAMPLES  = 100;
num WIDTH    =  80;
num HEIGHT   =  40;
str LUT      = "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\"^`'. ";

@lookup: chr (p: num) {
    num size = LUT.length();
    num idx = clamp(floor(p * size), 0, size - 1);
    ret LUT[size - 1 - idx];
}

@mandel: num (z0: complex, max: num) {
    complex z = z0;
    for (num t = 0; t < max; t++) {
        if (z.abs() > 2.0)
            ret t;
        z = z.square() + z0;
    }
    ret max;
}

@main: num {

    num xc = num(readf("xc: "));     ## -0.5
    num yc = num(readf("yc: "));     ##    0
    num size = num(readf("size: ")); ##    2

    printf("Generating Mandelbrot:\n");
    for (num j = 0; j < HEIGHT; j++) {
		for (num i = 0; i < WIDTH; i++) {
			num n = 0;
			for (num s = 0; s < SAMPLES; s++) {
				num x0 = xc - size / 2 + size * (i + random() - 0.5) / WIDTH;
				num y0 = yc - size / 2 + size * (j + random() - 0.5) / HEIGHT;
				## num x0 = xc - size / 2 + size * i / WIDTH;
				## num y0 = yc - size / 2 + size * j / HEIGHT;
				complex z0 = complex(x0, y0);
				n += mandel(z0, MAX_ITER);
			}
			n /= (SAMPLES * MAX_ITER);
			printf("%c", lookup(n));
		}
		printf("\n");
	}
    printf("Done!\n");

    ret 0;
}
